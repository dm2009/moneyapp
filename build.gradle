import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "java"
apply plugin: "com.bmuschko.tomcat"
apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "pmd"

repositories {
    mavenCentral()
    jcenter()
}

ext {
    tomcatVersion = "7.0.69"

    javaxServlet = "3.1.0"
    javaxServletJsp = "2.1"
    springVersion = "4.2.5.RELEASE"
    commonsConfigurationVersion = "1.10"
    commonsDbcpVersion = "1.3"
    slf4jVersion = "1.7.21"
    postgresqlVersion = "9.3-1100-jdbc41"
    validationVersion = "1.1.0.Final"
    jstlVersion = "1.2"
}

dependencies {
    providedCompile "javax.servlet:javax.servlet-api:$javaxServlet"
    providedCompile "javax.servlet.jsp:jsp-api:$javaxServletJsp"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    compile "commons-configuration:commons-configuration:$commonsConfigurationVersion"

    compile "commons-dbcp:commons-dbcp:$commonsDbcpVersion"

    compile "org.postgresql:postgresql:$postgresqlVersion"

    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"

    compile "javax.validation:validation-api:$validationVersion"

    runtime "javax.servlet:jstl:$jstlVersion"

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion",
            "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"
}

buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.bmuschko:gradle-tomcat-plugin:2.2.5"
    }
}

checkstyle {

    configFile = rootProject.file("tools/checkstyle/sun_checks.xml")
    ignoreFailures = true
    showViolations = true
}

checkstyleTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.destination rootProject.file("build/reports/checkstyle/checkstyle_report.html")
    }
}

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.destination rootProject.file("build/reports/findbugs/findbugs_report.html")
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = true
    ruleSets = ["java-basic", "java-strings", "java-braces"]
    reportsDir = file("${rootProject.rootDir}/build/reports/pmd")

}

check << {
    File outDir = new File('build/reports/pmdcpd/')
    outDir.mkdirs()
    ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
            classpath: configurations.pmd.asPath)

    ant.cpd(minimumTokenCount: "100", format: 'xml',
            outputFile: new File(outDir, 'cpd.xml')) {
        fileset(dir: "src/main/java") {
            include(name: '**/*.java')
        }
    }
    ant.xslt(in: file("${outDir}/cpd.xml"), style: rootProject.file("tools/pmd/cpdhtml.xslt"), out: "${outDir}/cpd_report.html")
}

task copyTask(type: Copy) {
    from 'html'
    into 'build/reports'
    include '**/*.htm'
}

check.dependsOn copyTask


def String webXmlPath = 'build/forWar'
def String webXmlFile = 'web.xml'
def String webInf = 'src/main/webapp/WEB-INF'

task xmlDelete(type: Delete) {
    delete webXmlPath +'/'+ webXmlFile
}

task xmlFilter(type: Copy) {
    from webInf
    into webXmlPath
    include webXmlFile
    filter(ReplaceTokens, tokens: ['testBuild':  'false'])
}

war {
    rootSpec.exclude('WEB-INF/' + webXmlFile)
    webXml = file(webXmlPath+'/' + webXmlFile)
}

war.dependsOn xmlDelete,xmlFilter